// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentScreen = 'dashboard-screen';
let navigationHistory = [];
let currentResearcher = null;
let currentRequest = null;

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = {
    researchers: [
        {
            id: 1,
            name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            email: 'ivan.petrov@example.com',
            phone: '+7 (912) 345-67-89',
            specialization: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
            experience: 5,
            hourlyRate: 45,
            status: 'available',
            completedProjects: 12,
            rating: 4.8
        },
        {
            id: 2,
            name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            email: 'maria.sidorova@example.com',
            phone: '+7 (911) 123-45-67',
            specialization: 'Data Science',
            experience: 3,
            hourlyRate: 55,
            status: 'busy',
            completedProjects: 8,
            rating: 4.6
        },
        {
            id: 3,
            name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
            email: 'alexey.kozlov@example.com',
            phone: '+7 (999) 888-77-66',
            specialization: 'UX Research',
            experience: 7,
            hourlyRate: 60,
            status: 'available',
            completedProjects: 18,
            rating: 4.9
        }
    ],
    requests: [
        {
            id: 1,
            title: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞',
            client: '–¢–µ—Ö–Ω–æ–ü—Ä–æ',
            specialization: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            minExperience: 3,
            duration: 30,
            priority: 'high',
            status: 'new',
            createdAt: '2024-01-22T10:00:00Z'
        },
        {
            id: 2,
            title: '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
            client: 'Digital Solutions',
            specialization: 'UX Research',
            minExperience: 2,
            duration: 45,
            priority: 'medium',
            status: 'new',
            createdAt: '2024-01-22T11:30:00Z'
        }
    ],
    projects: [
        {
            id: 1,
            title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ FinTech',
            client: '–ë–∞–Ω–∫ "–°—Ç–∞–Ω–¥–∞—Ä—Ç"',
            researcher: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            status: 'in-progress',
            startDate: '2024-01-15',
            endDate: '2024-02-15',
            budget: 75000
        }
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadMockData();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    showScreen('dashboard-screen');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateDashboardStats();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (currentScreen !== screenId) {
        navigationHistory.push(currentScreen);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        currentScreen = screenId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        updateHeaderTitle(screenId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
        loadScreenData(screenId);
    }
}

function goBack() {
    if (navigationHistory.length > 0) {
        const previousScreen = navigationHistory.pop();
        showScreen(previousScreen);
    } else {
        showScreen('dashboard-screen');
    }
}

function updateHeaderTitle(screenId) {
    const titles = {
        'dashboard-screen': '–ì–ª–∞–≤–Ω–∞—è',
        'researchers-screen': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏',
        'add-researcher-screen': '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è',
        'requests-screen': '–ó–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
        'projects-screen': '–ü—Ä–æ–µ–∫—Ç—ã',
        'time-tracking-screen': '–£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏',
        'clients-screen': '–ö–ª–∏–µ–Ω—Ç—ã',
        'reports-screen': '–û—Ç—á–µ—Ç—ã',
        'researcher-details-screen': '–î–µ—Ç–∞–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è'
    };
    
    document.querySelector('.header-title').textContent = titles[screenId] || 'Research Agency';
}

function loadScreenData(screenId) {
    switch(screenId) {
        case 'researchers-screen':
            loadResearchersList();
            break;
        case 'requests-screen':
            loadRequestsList();
            break;
        case 'dashboard-screen':
            updateDashboardStats();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadMockData() {
    // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ mockData
    console.log('–ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', mockData);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
function updateDashboardStats() {
    const stats = {
        researchers: mockData.researchers.length,
        activeProjects: mockData.projects.filter(p => p.status === 'in-progress').length,
        newRequests: mockData.requests.filter(r => r.status === 'new').length,
        monthlyRevenue: 156000
    };
    
    document.querySelector('.stat-card:nth-child(1) .stat-value').textContent = stats.researchers;
    document.querySelector('.stat-card:nth-child(2) .stat-value').textContent = stats.activeProjects;
    document.querySelector('.stat-card:nth-child(3) .stat-value').textContent = stats.newRequests;
    document.querySelector('.stat-card:nth-child(4) .stat-value').textContent = formatCurrency(stats.monthlyRevenue);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º–∏
function loadResearchersList() {
    const researchersList = document.querySelector('.researchers-list');
    if (!researchersList) return;
    
    researchersList.innerHTML = '';
    
    mockData.researchers.forEach(researcher => {
        const researcherCard = createResearcherCard(researcher);
        researchersList.appendChild(researcherCard);
    });
}

function createResearcherCard(researcher) {
    const card = document.createElement('div');
    card.className = 'researcher-card';
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ HTML —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const avatar = getResearcherAvatar(researcher.name);
    const name = escapeHtml(researcher.name);
    const specialization = escapeHtml(researcher.specialization);
    const status = escapeHtml(getStatusText(researcher.status));
    
    card.innerHTML = `
        <div class="researcher-avatar">${avatar}</div>
        <div class="researcher-info">
            <h3>${name}</h3>
            <p>${specialization}</p>
            <div class="researcher-details">
                <span class="experience">–û–ø—ã—Ç: ${researcher.experience} –ª–µ—Ç</span>
                <span class="rate">–°—Ç–∞–≤–∫–∞: ${researcher.hourlyRate}$/—á</span>
                <span class="status ${researcher.status}">${status}</span>
            </div>
        </div>
        <button class="btn-secondary" onclick="showResearcherDetails(${researcher.id})">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
    `;
    
    return card;
}

function getResearcherAvatar(name) {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–º–æ–¥–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
    const emojis = ['üë®‚Äçüíº', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüíª', 'üë®‚Äçüíª'];
    const index = name.length % emojis.length;
    return emojis[index];
}

function getStatusText(status) {
    const statusTexts = {
        'available': '–°–≤–æ–±–æ–¥–µ–Ω',
        'busy': '–ó–∞–Ω—è—Ç',
        'on-vacation': '–í –æ—Ç–ø—É—Å–∫–µ'
    };
    return statusTexts[status] || status;
}

function showResearcherDetails(researcherId) {
    try {
        const researcher = mockData.researchers.find(r => r.id === researcherId);
        if (!researcher) {
            throw new Error('–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        currentResearcher = researcher;
        loadResearcherDetails(researcher);
        showScreen('researcher-details-screen');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è');
    }
}

function loadResearcherDetails(researcher) {
    try {
        document.getElementById('detail-name').textContent = escapeHtml(researcher.name);
        document.getElementById('detail-specialization').textContent = escapeHtml(researcher.specialization);
        document.getElementById('detail-email').textContent = escapeHtml(researcher.email);
        document.getElementById('detail-phone').textContent = escapeHtml(researcher.phone);
        document.getElementById('detail-experience').textContent = `${researcher.experience} –ª–µ—Ç`;
        document.getElementById('detail-rate').textContent = `${researcher.hourlyRate}$/—á`;
        document.getElementById('detail-projects').textContent = researcher.completedProjects;
        document.getElementById('detail-rating').textContent = `${researcher.rating}/5`;
        
        const statusElement = document.getElementById('detail-status');
        statusElement.textContent = getStatusText(researcher.status);
        statusElement.className = `status-badge-large ${researcher.status}`;
        
        const avatarElement = document.querySelector('.researcher-avatar-large');
        avatarElement.textContent = getResearcherAvatar(researcher.name);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
function addResearcher() {
    const formData = {
        name: document.getElementById('researcher-name').value,
        email: document.getElementById('researcher-email').value,
        phone: document.getElementById('researcher-phone').value,
        specialization: document.getElementById('researcher-specialization').value,
        experience: parseInt(document.getElementById('researcher-experience').value),
        hourlyRate: parseInt(document.getElementById('researcher-rate').value)
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateResearcherForm(formData)) {
        return;
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
    setTimeout(() => {
        const newResearcher = {
            id: mockData.researchers.length + 1,
            ...formData,
            status: 'available',
            completedProjects: 0,
            rating: 3.0
        };
        
        mockData.researchers.push(newResearcher);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showSuccessMessage('–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
        showScreen('researchers-screen');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateDashboardStats();
        
    }, 1000);
}

function validateResearcherForm(data) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!data.name || !data.email || !data.specialization || !data.experience || !data.hourlyRate) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    const emailExists = mockData.researchers.some(r => r.email === data.email);
    if (emailExists) {
        showError('–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—ã—Ç–∞
    if (data.experience < 0 || data.experience > 50) {
        showError('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 50 –ª–µ—Ç');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏
    if (data.hourlyRate < 10 || data.hourlyRate > 200) {
        showError('–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10$ –¥–æ 200$');
        return false;
    }
    
    return true;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
function loadRequestsList() {
    const requestsList = document.querySelector('.requests-list');
    if (!requestsList) return;
    
    requestsList.innerHTML = '';
    
    const activeTab = getActiveTab();
    const filteredRequests = mockData.requests.filter(request => request.status === activeTab);
    
    if (filteredRequests.length === 0) {
        requestsList.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</div>';
        return;
    }
    
    filteredRequests.forEach(request => {
        const requestCard = createRequestCard(request);
        requestsList.appendChild(requestCard);
    });
}

function createRequestCard(request) {
    const card = document.createElement('div');
    card.className = 'request-card';
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ HTML —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const title = escapeHtml(request.title);
    const client = escapeHtml(request.client);
    const specialization = escapeHtml(request.specialization);
    const priorityText = escapeHtml(getPriorityText(request.priority));
    
    card.innerHTML = `
        <div class="request-header">
            <h3>${title}</h3>
            <span class="priority ${request.priority}">${priorityText}</span>
        </div>
        <div class="request-client">–ö–æ–º–ø–∞–Ω–∏—è: ${client}</div>
        <div class="request-details">
            <span>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${specialization}</span>
            <span>–û–ø—ã—Ç: –æ—Ç ${request.minExperience} –ª–µ—Ç</span>
            <span>–°—Ä–æ–∫: ${request.duration} –¥–Ω–µ–π</span>
        </div>
        <div class="request-actions">
            <button class="btn-primary" onclick="processRequest(${request.id})">–û–±—Ä–∞–±–æ—Ç–∞—Ç—å</button>
            <button class="btn-secondary" onclick="declineRequest(${request.id})">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        </div>
    `;
    
    return card;
}

function getPriorityText(priority) {
    const priorityTexts = {
        'high': '–í—ã—Å–æ–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'low': '–ù–∏–∑–∫–∏–π'
    };
    return priorityTexts[priority] || priority;
}

function switchRequestTab(tab) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.textContent.toLowerCase().includes(tab.toLowerCase())) {
            btn.classList.add('active');
        }
    });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    loadRequestsList();
}

function getActiveTab() {
    const activeBtn = document.querySelector('.tab-btn.active');
    if (!activeBtn) return 'new';
    
    const text = activeBtn.textContent.toLowerCase();
    if (text.includes('–Ω–æ–≤—ã–µ')) return 'new';
    if (text.includes('–æ–±—Ä–∞–±–æ—Ç–∫–µ')) return 'processing';
    if (text.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ')) return 'completed';
    return 'new';
}

function processRequest(requestId) {
    const request = mockData.requests.find(r => r.id === requestId);
    if (request) {
        currentRequest = request;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        showLoading('–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        setTimeout(() => {
            hideLoading();
            
            // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
            const suitableResearchers = findSuitableResearchers(request);
            
            if (suitableResearchers.length > 0) {
                showCandidateSelection(request, suitableResearchers);
            } else {
                showError('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º');
            }
        }, 1500);
    }
}

function findSuitableResearchers(request) {
    return mockData.researchers.filter(researcher => 
        researcher.specialization.toLowerCase().includes(request.specialization.toLowerCase()) &&
        researcher.experience >= request.minExperience &&
        researcher.status === 'available'
    ).slice(0, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
}

function showCandidateSelection(request, candidates) {
    let message = `–ù–∞–π–¥–µ–Ω–æ ${candidates.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${request.title}":\n\n`;
    
    candidates.forEach((candidate, index) => {
        const cost = calculateProjectCost(candidate, request.duration);
        message += `${index + 1}. ${candidate.name} (${candidate.specialization})\n`;
        message += `   –û–ø—ã—Ç: ${candidate.experience} –ª–µ—Ç, –°—Ç–∞–≤–∫–∞: ${candidate.hourlyRate}$/—á\n`;
        message += `   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatCurrency(cost)}\n\n`;
    });
    
    message += '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.';
    
    if (confirm(message)) {
        showSuccessMessage('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        request.status = 'processing';
        loadRequestsList();
        updateDashboardStats();
    }
}

function calculateProjectCost(researcher, duration) {
    const estimatedHours = duration * 8; // 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
    return researcher.hourlyRate * estimatedHours;
}

function declineRequest(requestId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å?')) {
        const request = mockData.requests.find(r => r.id === requestId);
        if (request) {
            request.status = 'declined';
            showSuccessMessage('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            loadRequestsList();
            updateDashboardStats();
        }
    }
}

// –£—Ç–∏–ª–∏—Ç—ã
function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .replace(/&/g, "&")
        .replace(/</g, "<")
        .replace(/>/g, ">")
        .replace(/"/g, '"')
        .replace(/'/g, "&#039;");
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(amount);
}

function showError(message) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π toast –≤–º–µ—Å—Ç–æ alert
        const toast = document.createElement('div');
        toast.className = 'error-toast';
        toast.innerHTML = `
            <div class="toast-icon">‚ùå</div>
            <div class="toast-message">${escapeHtml(message)}</div>
            <button class="toast-close" onclick="this.parentElement.remove()">√ó</button>
        `;
        toast.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            background: #f8d7da;
            color: #721c24;
            padding: 16px;
            border-radius: 8px;
            border-left: 4px solid #dc3545;
            display: flex;
            align-items: center;
            gap: 12px;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease-out;
        `;
        
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            .toast-icon { font-size: 20px; }
            .toast-message { flex: 1; font-size: 14px; }
            .toast-close {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                color: #721c24;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 5000);
        
    } catch (error) {
        // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π alert
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

function showSuccessMessage(message) {
    try {
        const toast = document.createElement('div');
        toast.className = 'success-toast';
        toast.innerHTML = `
            <div class="toast-icon">‚úÖ</div>
            <div class="toast-message">${escapeHtml(message)}</div>
            <button class="toast-close" onclick="this.parentElement.remove()">√ó</button>
        `;
        toast.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            background: #d4edda;
            color: #155724;
            padding: 16px;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            display: flex;
            align-items: center;
            gap: 12px;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease-out;
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
        
    } catch (error) {
        alert('‚úÖ ' + message);
    }
}

function showLoading(message) {
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingOverlay = document.createElement('div');
    loadingOverlay.id = 'loading-overlay';
    loadingOverlay.innerHTML = `
        <div class="loading-spinner"></div>
        <div class="loading-message">${escapeHtml(message)}</div>
    `;
    loadingOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    `;
    
    const spinnerStyle = `
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    `;
    
    const messageStyle = `
        margin-top: 16px;
        font-size: 16px;
        color: #333;
    `;
    
    const style = document.createElement('style');
    style.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .loading-spinner { ${spinnerStyle} }
        .loading-message { ${messageStyle} }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(loadingOverlay);
}

function hideLoading() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
        loadingOverlay.remove();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
document.addEventListener('input', function(e) {
    if (e.target.type === 'email') {
        validateEmail(e.target);
    }
});

function validateEmail(input) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (input.value && !emailRegex.test(input.value)) {
        input.style.borderColor = 'var(--error-color)';
    } else {
        input.style.borderColor = 'var(--border-color)';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
function assignToProject() {
    if (!currentResearcher) return;
    
    showLoading('–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    setTimeout(() => {
        hideLoading();
        
        const availableProjects = mockData.requests.filter(r => r.status === 'new');
        
        if (availableProjects.length > 0) {
            const projectList = availableProjects.map(p =>
                `- ${p.title} (${p.client})`
            ).join('\n');
            
            if (confirm(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ${currentResearcher.name}:\n\n${projectList}\n\n–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç?`)) {
                showSuccessMessage(`${currentResearcher.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø—Ä–æ–µ–∫—Ç!`);
            }
        } else {
            showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        }
    }, 1000);
}

function editResearcher() {
    if (!currentResearcher) return;
    
    showSuccessMessage('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}